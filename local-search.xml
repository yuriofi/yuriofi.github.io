<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>W4</title>
    <link href="/2024/08/02/W4/"/>
    <url>/2024/08/02/W4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>W3</title>
    <link href="/2024/07/16/W3/"/>
    <url>/2024/07/16/W3/</url>
    
    <content type="html"><![CDATA[<h1 id="第三周-7-22-7-28"><a href="#第三周-7-22-7-28" class="headerlink" title="第三周(7.22~7.28)"></a>第三周(7.22~7.28)</h1><hr><h2 id="CSS三大特性"><a href="#CSS三大特性" class="headerlink" title="CSS三大特性"></a>CSS三大特性</h2><ul><li><p>层叠性</p></li><li><p>继承性</p></li><li><p>优先级</p></li></ul><hr><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a><strong>颜色</strong></h2><blockquote><p><code>color:rgb(0,0,0)</code></p><p><code>color:rgba(0,0,0,0)</code>a代表透明度0~1 0代表全透明</p></blockquote><blockquote><p><code>color:#??????</code>用十六进制表示红绿蓝 HEX</p><p><code>color:#????????</code>多两位也是代表透明度 HEXA</p><p>每一位的取值范围是(0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f)</p><p><code>color:hsl(色相，饱和度，透明度)</code></p></blockquote><p>qq截图可以取色</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a><strong>字体</strong></h2><p><code>font-family:&quot;微软雅黑&quot;,&quot;华文琥珀&quot;,&quot;华文彩云&quot;,sans-serif</code>；sans-serif非衬线</p><p><code>font-style:normal</code></p><p><code>font-style:italic</code>斜体</p><p><code>font-style:oblique斜体</code></p><p><code>font-weight:bold;</code></p><p><strong>复合属性</strong></p><p><code>font:bold litalic 100px &quot;微软雅黑&quot;</code>最后两个必须是大小、字体，各个属性用空格分开</p><p><strong>文本间距</strong></p><p><code>letter-spacing:</code>字母间距</p><p><code>word-spacing:</code>单词间距</p><p><code>text-decoration:overline/underline/line-through</code></p><blockquote><p>这些线可以再增加属性添加颜色，wavy波浪线 dotted虚线</p><p>text-decoration:overline dotted red</p></blockquote><p><code>text-decoration:none</code>(消除本身自带的下划线，例如超链接的)</p><p><strong>文本缩进</strong></p><p><code>text-indent</code></p><blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">text-indent</span>:<span class="hljs-number">80px</span>;<span class="hljs-comment">/*首行空两格*/</span><br>&#125;<br></code></pre></td></tr></table></figure></blockquote><p><strong>文本对齐</strong></p><p><code>text-align:left/center/right</code></p><p><strong>行高</strong></p><p><code>line-height:数值</code>默认font-size的数值倍</p><p><code>vertical-align</code>不能控制块级元素，操作行内元素，也可用于单元格</p><h2 id="列表相关属性"><a href="#列表相关属性" class="headerlink" title="列表相关属性"></a><strong>列表相关属性</strong></h2><p><code>list-style-type:none/square/decimal/</code>列表符号</p><p><code>list-style-position:inside/outside</code>列表符号的位置</p><p><code>list-style-image:url(图片地址)</code>自定义列表符号</p><p>复合属性<code>list-style:</code></p><h2 id="边框相关属性"><a href="#边框相关属性" class="headerlink" title="边框相关属性"></a>边框相关属性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*border-width:2px</span><br><span class="hljs-comment">  border-color:green</span><br><span class="hljs-comment">  border-style:solid</span><br><span class="hljs-comment">*/</span><br><span class="hljs-selector-tag">table</span> &#123;<br>    <span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> green solid;<br>&#125;<br><span class="hljs-selector-tag">td</span>,<span class="hljs-selector-tag">th</span> &#123;<br>   <span class="hljs-attribute">border</span>:<span class="hljs-number">2px</span> orange dotted; <br>&#125;<br></code></pre></td></tr></table></figure><p>不仅表格能用其他元素可以应用</p><h2 id="表格独有属性"><a href="#表格独有属性" class="headerlink" title="表格独有属性"></a>表格独有属性</h2><p><code>table-layout:fixed;</code>控制表格的列宽</p><p><code>border-spacing:</code>控制单元格间距</p><p><code>border-collapse:seperate合并相邻单元格的边框</code></p><p><code>empty-cells:show/hide  </code>隐藏没有内容的单元格</p><p><code>caption-side：top/bottom</code>设置表格标题位置</p><h2 id="背景相关属性"><a href="#背景相关属性" class="headerlink" title="背景相关属性"></a>背景相关属性</h2><p><code>background-image</code> </p><p><code>background-repeat:repeat/no-repeat/repeat-x/repeat-y</code>设置背景重复方式</p><p><code>background-position:</code>水平：left center right   垂直：top center bottom</p><p>复合属性：<code>background</code></p><h2 id="鼠标相关属性"><a href="#鼠标相关属性" class="headerlink" title="鼠标相关属性"></a>鼠标相关属性</h2><p><code>cursor:pointer/help/wait</code>修改光标的样式</p><p><code>cursor:url()，pointer</code> 自定义鼠标图标</p><h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><p><code>em</code>相对于当前元素的font-size的倍数</p><p><code>rem</code>相对于根元素的font-size的倍数</p><p><code>%</code>相对于其父元素的百分比</p><hr><h2 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h2><ul><li><p>块元素</p><blockquote><p>在页面中独占一行，默认宽度撑满父元素，默认高度由内容撑开，可通过CSS设置宽高</p></blockquote></li><li><p>行内元素(span)</p><blockquote><p>不独占一行，默认宽度高度都由内容撑开，无法通过CSS设置宽高</p></blockquote></li><li><p>行内块元素(img)</p><blockquote><p>不独占一行，默认宽度高度都由内容撑开，可通过CSS设置宽高</p></blockquote></li></ul><p><img src="/./imgs/$%7Bfiilename%7D/image-20240726172904725.png" alt="image-20240726172904725"></p><h3 id="修改元素的显示模式"><a href="#修改元素的显示模式" class="headerlink" title="修改元素的显示模式"></a>修改元素的显示模式</h3><p>display：block&#x2F;inline-block&#x2F;inline&#x2F;none</p><h3 id="隐藏元素的两种方法"><a href="#隐藏元素的两种方法" class="headerlink" title="隐藏元素的两种方法"></a>隐藏元素的两种方法</h3><p><code>visibility:show/hidden</code>隐藏会占有原来的位置</p><p><code>display:none</code>彻底隐藏</p><hr><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p><code>css</code>会把<code>html</code>元素都堪称一个盒子 </p><p>margin外边距 border边框 padding内边距 content内容</p><p><img src="/./imgs/$%7Bfiilename%7D/image-20240729185930593.png" alt="image-20240729185930593"></p><ul><li>margin塌陷问题</li><li><img src="/./imgs/$%7Bfiilename%7D/image-20240730143033096.png" alt="image-20240730143033096"></li></ul><p><img src="/./imgs/$%7Bfiilename%7D/image-20240730144037284.png" alt="image-20240730144037284"></p><hr><h3 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h3><p>可继承：字体属性文本属性文字颜色</p><p>不可继承：边框背景内边距外边距宽高溢出方式</p><blockquote><p>能继承的属性都是不影响布局，和盒子模型没关系的</p></blockquote><p><img src="/./imgs/$%7Bfiilename%7D/image-20240730155325198.png" alt="image-20240730155325198"></p><hr><h3 id="空白问题"><a href="#空白问题" class="headerlink" title="空白问题"></a>空白问题</h3><p>解决行内块的幽灵空白问题</p><p>法一：让div的 font-size&#x3D;0</p><p>法二：img 设置vertical-align:或者display:block</p><p><img src="/./imgs/$%7Bfiilename%7D/image-20240801123422781.png" alt="image-20240801123422781"></p><hr><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>早期：文字环绕图片</p><p>后期：布局</p><p><code>img&#123;</code></p><p><code>float:left</code></p><p><code>&#125;</code></p><p>元素浮动后的特点：</p><ol><li>脱离文档流</li><li>不管浮动前是什么元素，浮动后默认宽与高都是被内容撑开，可以设置宽高</li><li>不会独占一行，可与其他元素共用一行</li><li>不会margin合并也不会margin塌陷，能够完美设置四个方向的margin和padding</li><li>不会像行内块一样被当作文本处理</li></ol><p>浮动后的影响：</p><ol><li>浮动元素对后面的元素有影响对前面的元素无影响</li><li>对兄弟元素：后面的兄弟元素会占据浮动元素之前的位置，在浮动元素的下面，对前面的兄弟无影响</li><li>对父元素的影响：不能撑起父元素的高度，导致父元素高度塌陷，但父元素的宽度依然束缚浮动的元素</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.outer</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">display</span>:block;<br>    <span class="hljs-attribute">clear</span>:both;<span class="hljs-comment">/*消除浮动的影响*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/./imgs/$%7Bfiilename%7D/image-20240801135333505.png" alt="image-20240801135333505"></p><hr><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>开启定位：<code>position:relative;</code></p><p>使用left bottom top right 四个属性调整位置</p><p>相对定位的参考点是相对自己原来的位置</p><p>相对定位特点：</p><ol><li><p>不会脱离文档流，元素位置变化是视觉效果上的变化不会对元素产生任何影响</p></li><li><p>定位元素的显示层级比普通元素高，无论什么定位显示层级都是一样的</p><p>默认规则：</p><ul><li>定位的元素都会盖在普通元素之上</li><li>都发生定位的两个元素，后写的元素会盖在先写的元素之上</li></ul></li></ol><blockquote><p>绝大多数情况下相对定位会与绝对定位配合使用</p></blockquote><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p><code>position:absolute</code></p><blockquote><p>子绝父相</p><p>子元素开启绝对定位再让父元素开启相对定位，子元素的定位参考点就是父元素</p></blockquote><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p><code>position:fixed</code></p><p>参考点是视口，比如固定在左上角，无论你上下滑动始终在视口的左上角</p><blockquote><p>小广告的应用</p></blockquote><h3 id="粘性定位"><a href="#粘性定位" class="headerlink" title="粘性定位"></a>粘性定位</h3><p><code>position:sticky;</code></p><p>参考点：离他最近的一个拥有滚动条的祖先元素</p><ul><li>不会脱离文档流，是一种专门用于窗口滚动的新的定位方式</li><li>最常见的值是top值</li></ul><blockquote><p>粘性定位和相对定位的特点基本一致但不同的是粘性定位可以在元素到达某个位置时将其固定</p></blockquote><h3 id="定位层级"><a href="#定位层级" class="headerlink" title="定位层级"></a>定位层级</h3><ul><li>定位层级比普通元素高</li><li><code>z-index</code>的属性值时数字，没有单位，值越大显示层级越高</li><li>只有定位的元素设置<code>z-index</code>才有效</li></ul><h3 id="定位的特殊应用"><a href="#定位的特殊应用" class="headerlink" title="定位的特殊应用"></a>定位的特殊应用</h3><blockquote><ol><li>发生固定定位、绝对定位后，元素都变成了定位元素，默认宽高被内容撑开，且仍然可以设置宽高</li><li>发生相对定位后元素依然是之前的显示模式</li><li>以下的特殊应用只针对绝对定位和固定定位的元素，不包括相对定位的元素</li></ol></blockquote><h4 id="让定位元素的宽充满包含块"><a href="#让定位元素的宽充满包含块" class="headerlink" title="让定位元素的宽充满包含块"></a>让定位元素的宽充满包含块</h4><ol><li>块宽与包含块保持一致可以给定位元素同时设置<code>left</code> <code>right</code>为0</li><li>高度与包含块保持一致可以给定位元素同时设置<code>top</code> <code>bottom</code>为0</li></ol><h4 id="让定位元素在包含块中居中"><a href="#让定位元素在包含块中居中" class="headerlink" title="让定位元素在包含块中居中"></a>让定位元素在包含块中居中</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">left</span>：<span class="hljs-number">0</span>;<br><span class="hljs-attribute">right</span>：<span class="hljs-number">0</span>;<br><span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">margin</span>:auto;<br></code></pre></td></tr></table></figure><blockquote><p>该定位元素必须设置宽高</p></blockquote><hr><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="版心"><a href="#版心" class="headerlink" title="版心"></a>版心</h3><ul><li>在pc端网页中一般会有一个固定宽度且水平居中的盒子来显示网页的主要内容这是网页的版心</li><li>版心的宽度一般是960-1200px</li><li>可以是一个也可以多个</li></ul><h3 id="常用布局名词"><a href="#常用布局名词" class="headerlink" title="常用布局名词"></a>常用布局名词</h3><table><thead><tr><th>位置</th><th></th></tr></thead><tbody><tr><td>顶部导航条</td><td><code>topbar</code></td></tr><tr><td>页头</td><td><code>header``page-header</code></td></tr><tr><td>导航</td><td><code>nav</code> <code>navigator</code> <code>navbar</code></td></tr><tr><td>搜索框</td><td><code>search</code> <code>search-box</code></td></tr><tr><td>横幅、广告、宣传图</td><td><code>banner</code></td></tr><tr><td>主要内容</td><td><code>content</code> <code>main</code></td></tr><tr><td>侧边栏</td><td><code>aside</code> <code>sidebar</code></td></tr><tr><td>页脚</td><td><code>footer</code> <code>page-footer</code></td></tr></tbody></table><h3 id="重置默认样式"><a href="#重置默认样式" class="headerlink" title="重置默认样式"></a>重置默认样式</h3><h4 id="方案一：使用全局选择器"><a href="#方案一：使用全局选择器" class="headerlink" title="方案一：使用全局选择器"></a>方案一：使用全局选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方案二：reset-css"><a href="#方案二：reset-css" class="headerlink" title="方案二：reset.css"></a>方案二：reset.css</h4><p>选择具有默认样式的元素，清空其默认的样式，经过reset后的网页，就像一张白纸，开发人员可根据设计稿，静思的去添加具体的样式</p><h4 id="方案三：Normalize-css"><a href="#方案三：Normalize-css" class="headerlink" title="方案三：Normalize.css"></a>方案三：Normalize.css</h4><p>在清楚默认样式的基础上保留一些有价值的默认样式</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>W2</title>
    <link href="/2024/07/16/W2/"/>
    <url>/2024/07/16/W2/</url>
    
    <content type="html"><![CDATA[<h1 id="第二周-7-15-7-22"><a href="#第二周-7-15-7-22" class="headerlink" title="第二周(7.15~7.22)"></a>第二周(7.15~7.22)</h1><hr><h2 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h2><blockquote><p>cmd   cd hexo-blog</p><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p><p>hexo s</p></blockquote><p><img src="/./imgs/$%7Bfiilename%7D/6bf14b23830890148e1e03dc9553568.png"></p><p><img src="/./imgs/$%7Bfiilename%7D/1721109554192.jpg"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/chenlove/p/15058170.html">利用GitHub搭建个人博客</a></p><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">githubpage+hexo搭建个人博客</a></p><p><a href="https://blog.csdn.net/Qxiaofei_/article/details/124629908">怎样上传图片</a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="二分查找-704"><a href="#二分查找-704" class="headerlink" title="二分查找(704)"></a>二分查找(704)</h3><blockquote><p>前提条件：有序数组 数中无重复元素</p><p>在while寻找中每一次边界的处理都要坚持根据区间的定义来操作</p></blockquote><p>伪代码</p><ul><li><p><strong>左闭右闭</strong>[left,right]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-comment">// 避免当 target 小于nums[0] nums[nums.length - 1]时多次循环运算</span><br>        <span class="hljs-keyword">if</span> (target &lt; nums[<span class="hljs-number">0</span>] || target &gt; nums[nums.length - <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>            <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<span class="hljs-comment">//防止溢出mid = left + (right - left)/2;</span><br>            <span class="hljs-keyword">if</span> (nums[mid] == target) &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                left = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nums[mid] &gt; target</span><br>                right = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未找到目标值</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>左闭右开</strong>[left,right)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">right=numsize<br><br><span class="hljs-title function_">while</span><span class="hljs-params">(left&lt;right)</span><br><br>right=mid<br><br>left=mid+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li></ul><p>​</p><h3 id="两数之和输入有序数组-167"><a href="#两数之和输入有序数组-167" class="headerlink" title="两数之和输入有序数组(167)"></a>两数之和输入有序数组(167)</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] numbers, <span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> right=numbers.length;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (left&lt;right) &#123;<br>            sum=numbers[left]+numbers[right];<br>            <span class="hljs-keyword">if</span>(sum&lt;target)&#123;<br>                left++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum&gt;target)&#123;<br>                right--;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> []&#123;left,right&#125;;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s)</span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=s.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left&lt;right) &#123;<br>            <span class="hljs-type">char</span> temp=s[left];<br>            s[left]=s[right];<br>            s[right]=temp;<br>            left++;<br>            right--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回文串判断"><a href="#回文串判断" class="headerlink" title="回文串判断"></a>回文串判断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=s.length()-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left&lt;right) &#123;<br>            <span class="hljs-keyword">if</span>(s.charAt(left)!=s.charAt(right))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            left++;<br>            right--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="有序数组的平方排序-977"><a href="#有序数组的平方排序-977" class="headerlink" title="有序数组的平方排序(977)"></a>有序数组的平方排序(977)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> k=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[] result=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>        <span class="hljs-keyword">while</span> (left&lt;=right) &#123;<br>            <span class="hljs-keyword">if</span>(nums[left]*nums[left]&lt;nums[right]*nums[right])&#123;<br>                result[k--]=nums[right]*nums[right];<br>                right--;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                result[k--]=nums[left]*nums[left];<br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="移除元素-27、287"><a href="#移除元素-27、287" class="headerlink" title="移除元素(27、287)"></a>移除元素(27、287)</h3><blockquote><p>移除指定值</p></blockquote><ul><li><p>双层循环</p><blockquote><p>第一层循环比较每个元素，第二层循环删除 与 val 相等的元素（把后面的数组往前挪）</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> k=nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]==val)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;k;j++)&#123;<br>                    nums[j]=nums[j+<span class="hljs-number">1</span>];<br>                &#125;<br>                i--;<br>                k--;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题</strong></p><p>在内部循环 <code>for (int j = i; j &lt; k; j++)</code> 中，当 <code>j = k-1</code> 时，会访问 <code>nums[j+1]</code>，这会导致数组越界异常。</p><p>虽然在内部循环中尝试向前移动元素来模拟删除操作，但实际上并未真正删除元素，而是将所有元素往前移动了一个位置，最后一个元素没有被正确处理。</p><p><strong>改进</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> k=nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]==val)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;k;j++)&#123;<br>                    nums[j-<span class="hljs-number">1</span>]=nums[j];<br>                &#125;<br>                i--;<br>                k--;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></blockquote><ul><li><p>双指针</p><blockquote><p>快慢指针替换双层循环。快指针做第一层循环比较每一个元素，慢指针接收 fast !&#x3D;&#x3D; val 的元素，相当于第二层循环的删除</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">int</span> k=nums.length;<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]!=val)&#123;<br>                nums[j++]=nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> j;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="删除重复元素-26"><a href="#删除重复元素-26" class="headerlink" title="删除重复元素(26)"></a>删除重复元素(26)</h3><p>前提：有序数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> len=nums.length;<br>        <span class="hljs-type">int</span> slow=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast=<span class="hljs-number">0</span>;fast&lt;len;fast++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[fast]!=nums[slow])&#123;<br>                slow++;<br>                nums[slow]=nums[fast];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="移动零-283"><a href="#移动零-283" class="headerlink" title="移动零(283)"></a>移动零(283)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> len=nums.length;<br>        <span class="hljs-type">int</span> slow=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast=<span class="hljs-number">0</span>;fast&lt;len;fast++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[fast]!=<span class="hljs-number">0</span>)&#123;<br>                nums[slow++]=nums[fast];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(;slow&lt;len;slow++)&#123;<br>            nums[slow]=<span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="螺旋矩阵-59"><a href="#螺旋矩阵-59" class="headerlink" title="螺旋矩阵(59)"></a>螺旋矩阵(59)</h3><p>0 1 2 </p><p>7 8 3</p><p>6 5 4</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] generateMatrix(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span> count=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=n-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> up=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> down=n-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[][] nums=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-keyword">while</span>(count&lt;=n*n)&#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=left;i&lt;=right;i++)&#123;<br>            nums[up][i]=count++;<br>           &#125;<br>           up++;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=up;i&lt;=down;i++)&#123;<br>            nums[i][right]=count++;<br>           &#125;<br>           right--;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=right;i&gt;=left;i--)&#123;<br>            nums[down][i]=count++;<br>           &#125;<br>           down--;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=down;i&gt;=up;i--)&#123;<br>            nums[i][left]=count++;<br>           &#125;<br>           left++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h4 id="合并两个有序链表-21"><a href="#合并两个有序链表-21" class="headerlink" title="合并两个有序链表(21)"></a>合并两个有序链表(21)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode list1, ListNode list2)</span> &#123;<br>        ListNode dummy=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>        ListNode p=dummy;<br>        ListNode p1=list1;<br>        ListNode p2=list2;<br>        <span class="hljs-keyword">while</span> (p1!=<span class="hljs-literal">null</span>&amp;&amp;p2!=<span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(p1.val&lt;p2.val)&#123;<br>                p.next=p1;<br>                p1=p1.next;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                p.next=p2;<br>                p2=p2.next;<br>            &#125;<br>            p=p.next;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(p1!=<span class="hljs-literal">null</span>)&#123;<br>            p.next=p1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(p2!=<span class="hljs-literal">null</span>)&#123;<br>            p.next=p2;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="反转链表-206"><a href="#反转链表-206" class="headerlink" title="反转链表(206)"></a>反转链表(206)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        ListNode curr=head;<br>        ListNode p=<span class="hljs-literal">null</span>;<br>        ListNode temp=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span>(curr!=<span class="hljs-literal">null</span>)&#123;<br>            temp=curr.next;<br>            curr.next=p;<br>            p=curr;<br>            curr=temp; <br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="两两交换链表中的节点-24"><a href="#两两交换链表中的节点-24" class="headerlink" title="两两交换链表中的节点(24)"></a>两两交换链表中的节点(24)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        ListNode dummy=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        ListNode p=dummy;<br>        <span class="hljs-keyword">while</span>(p.next!=<span class="hljs-literal">null</span>&amp;&amp;p.next.next!=<span class="hljs-literal">null</span>)&#123;<br>            ListNode p1=p.next;<br>            ListNode p2=p.next.next;<br>            p.next=p2;<br>            p1.next=p2.next;<br>            p2.next=p1;<br>            p=p.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>         <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="移除链表元素-203"><a href="#移除链表元素-203" class="headerlink" title="移除链表元素(203)"></a>移除链表元素(203)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>    <span class="hljs-comment">// 创建一个虚拟节点(dummy node)，用于处理可能涉及头节点的情况</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>, head);<br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> dummy;  <span class="hljs-comment">// pre 指针始终指向当前节点的前一个节点</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;   <span class="hljs-comment">// cur 指针从头节点开始遍历整个链表</span><br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cur.val == val) &#123;<br>            <span class="hljs-comment">// 如果当前节点的值等于 val，则跳过当前节点</span><br>            pre.next = cur.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 否则，将 pre 指针移动到当前节点，表示当前节点是有效节点</span><br>            pre = cur;<br>        &#125;<br>        <span class="hljs-comment">// 将 cur 指针向前移动到下一个节点</span><br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-comment">// 返回从虚拟节点的下一个节点开始的链表，即删除了所有值为 val 的节点后的结果链表</span><br>    <span class="hljs-keyword">return</span> dummy.next;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="设计链表-707"><a href="#设计链表-707" class="headerlink" title="设计链表(707)"></a>设计链表(707)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode next;<br>    ListNode()&#123;&#125;<br>    ListNode(<span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-built_in">this</span>.val=val;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br>    <span class="hljs-comment">//size存储链表元素的个数</span><br>    <span class="hljs-type">int</span> size;<br>    <span class="hljs-comment">//虚拟头结点</span><br>    ListNode head;<br><br>    <span class="hljs-comment">//初始化链表</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyLinkedList</span><span class="hljs-params">()</span> &#123;<br>        size = <span class="hljs-number">0</span>;<br>        head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//获取第index个节点的数值，注意index是从0开始的，第0个节点就是头结点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">//如果index非法，返回-1</span><br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">currentNode</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//包含一个虚拟头节点，所以查找第 index+1 个节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= index; i++) &#123;<br>            currentNode = currentNode.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> currentNode.val;<br>    &#125;<br><br>    <span class="hljs-comment">//在链表最前面插入一个节点，等价于在第0个元素前添加</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(<span class="hljs-number">0</span>, val);<br>    &#125;<br><br>    <span class="hljs-comment">//在链表的最后插入一个节点，等价于在(末尾+1)个元素前添加</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        addAtIndex(size, val);<br>    &#125;<br><br>    <span class="hljs-comment">// 在第 index 个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span><br>    <span class="hljs-comment">// 如果 index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span><br>    <span class="hljs-comment">// 如果 index 大于链表的长度，则返回空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt; size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>            index = <span class="hljs-number">0</span>;<br>        &#125;<br>        size++;<br>        <span class="hljs-comment">//找到要插入节点的前驱</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index; i++) &#123;<br>            pred = pred.next;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">toAdd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(val);<br>        toAdd.next = pred.next;<br>        pred.next = toAdd;<br>    &#125;<br><br>    <span class="hljs-comment">//删除第index个节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span> || index &gt;= size) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        size--;<br>        <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;<br>            head = head.next;<br>    <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; index ; i++) &#123;<br>            pred = pred.next;<br>        &#125;<br>        pred.next = pred.next.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分割链表-86"><a href="#分割链表-86" class="headerlink" title="分割链表(86)"></a>分割链表(86)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">ListNode <span class="hljs-title function_">partition</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-comment">// 存放小于 x 的链表的虚拟头结点</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 存放大于等于 x 的链表的虚拟头结点</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(-<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// p1, p2 指针负责生成结果链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> dummy1, p2 = dummy2;<br>    <span class="hljs-comment">// p 负责遍历原链表，类似合并两个有序链表的逻辑</span><br>    <span class="hljs-comment">// 这里是将一个链表分解成两个链表</span><br>    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p.val &gt;= x) &#123;<br>            p2.next = p;<br>            p2 = p2.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            p1.next = p;<br>            p1 = p1.next;<br>        &#125;<br>        <span class="hljs-comment">// 不能直接让 p 指针前进，</span><br>        <span class="hljs-comment">// p = p.next</span><br>        <span class="hljs-comment">// 断开原链表中的每个节点的 next 指针</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> p.next;<br>        p.next = <span class="hljs-literal">null</span>;<br>        p = temp;<br>    &#125;<br>    <span class="hljs-comment">// 连接两个链表</span><br>    p1.next = dummy2.next;<br><br>    <span class="hljs-keyword">return</span> dummy1.next;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果你不断开原链表中的每个节点的 <code>next</code> 指针，那么就会出错，因为结果链表中会包含一个环：</p><p>没有很明白反复琢磨吧</p></blockquote><h4 id="单链表的倒数第k个节点"><a href="#单链表的倒数第k个节点" class="headerlink" title="单链表的倒数第k个节点"></a>单链表的倒数第k个节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">ListNode <span class="hljs-title function_">findFromEnd</span><span class="hljs-params">(ListNode head,<span class="hljs-type">int</span> k)</span>&#123;<br>    ListNode p1=head;<br>    <span class="hljs-comment">//p1先走k步</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>        p1=p1.next;<br>    &#125;<br>    ListNode p2=head;<br><br>    <span class="hljs-comment">//p1 p2同时走n-k步</span><br>    <span class="hljs-keyword">while</span> (p1!=<span class="hljs-literal">null</span>) &#123;<br>        p2=p2.next;<br>        p1=p1.next;<br>    &#125;<br>    <span class="hljs-comment">//现在p2指向第n-k+1个节点也就是倒数第k个</span><br>    <span class="hljs-keyword">return</span> p2;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><h4 id="创建双链表"><a href="#创建双链表" class="headerlink" title="创建双链表"></a>创建双链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoublyListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    DoublyListNode next, prev;<br>    DoublyListNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;<br>&#125;<br><br>DoublyListNode <span class="hljs-title function_">createDoublyLinkedList</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyListNode</span>(arr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-comment">// for 循环迭代创建双链表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyListNode</span>(arr[i]);<br>        cur.next = newNode;<br>        newNode.prev = cur;<br>        cur = cur.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双链表的访问"><a href="#双链表的访问" class="headerlink" title="双链表的访问"></a>双链表的访问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一条双链表</span><br><span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> createDoublyLinkedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;);<br><br><span class="hljs-comment">// 从头遍历双链表</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> head; p != <span class="hljs-literal">null</span>; p = p.next) &#123;<br>    System.out.println(p.val);<br>&#125;<br><br><span class="hljs-comment">// 从尾遍历双链表（假设我们有尾节点的引用 tail）</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>    System.out.println(p.val);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><h5 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一条双链表</span><br><span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> createDoublyLinkedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;);<br><br><span class="hljs-comment">// 在双链表头部插入新节点 0</span><br><span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">newHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyListNode</span>(<span class="hljs-number">0</span>);<br>newHead.next = head;<br>head.prev = newHead;<br>head = newHead;<br><span class="hljs-comment">// 现在链表变成了 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5</span><br></code></pre></td></tr></table></figure><h5 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建一条双链表</span><br><span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> createDoublyLinkedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;);<br><br><span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">tail</span> <span class="hljs-operator">=</span> head;<br><span class="hljs-comment">// 先走到链表的最后一个节点</span><br><span class="hljs-keyword">while</span> (tail.next != <span class="hljs-literal">null</span>) &#123;<br>    tail = tail.next;<br>&#125;<br><br><span class="hljs-comment">// 在双链表尾部插入新节点 6</span><br><span class="hljs-type">DoublyListNode</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoublyListNode</span>(<span class="hljs-number">6</span>);<br>tail.next = newNode;<br>newNode.prev = tail;<br><span class="hljs-comment">// 更新尾节点引用</span><br>tail = newNode;<br><br><span class="hljs-comment">// 现在链表变成了 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span><br></code></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><blockquote><p>外部样式用<code>link</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTM">&lt;head&gt;<br>&lt;link rel=&quot;stylesheet&quot; href=&quot;./exteriorstyle.css&quot;&gt;<br>&lt;/head&gt;<br></code></pre></td></tr></table></figure><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p><em><strong>选择器优先级</strong></em></p><p>id选择器&gt;类选择器&gt;元素选择器&gt;通配选择器</p><p>作用域越小优先级越大</p><p>行内样式权重大于所有选择器</p><p><code>!important</code>的权重大于行内样式大于所有选择器</p><blockquote><p> 元素选择器：</p><p>h1{<br> color: aquamarine;<br> font-size: 70px;<br>}</p></blockquote><blockquote><p>通配选择器：</p><p><code>*&#123;</code></p><p>&#96;&#96;}&#96;</p></blockquote><blockquote><p> 类选择器:</p><p>.类名 {</p><p>}</p></blockquote><blockquote><p>id选择器:</p><p>#id值{</p><p>}</p></blockquote><blockquote><p>p.class#id{</p><p>}</p></blockquote><blockquote><p>.class1,</p><p>.class2,</p><p>#id{</p><p>}</p></blockquote><blockquote><p>选择器&gt;选择器&gt;选择器&gt;……选择器n{}</p></blockquote><blockquote><p>选择器1+选择器2 {</p><p>}表示选择器1后紧紧相邻的兄弟元素</p></blockquote><blockquote><p>选择器1~选择器2{</p><p>}表示选择器1后的所有兄弟元素</p></blockquote><blockquote><p>[title^&#x3D;”a”]{</p><p>}选中具有title属性，且属性值以a开头</p></blockquote><blockquote><p>[title$&#x3D;”u”]{<br>}选中具有title属性，且属性值以u结尾</p><p>[title*&#x3D;”u”]{<br>}选中具有title属性，且属性值包含u</p></blockquote><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><ul><li>动态伪类</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 选中的是没有访问过的a元素 */</span><br>       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123;<br>           <span class="hljs-attribute">color</span>:aquamarine;<br>       &#125;<br>       <span class="hljs-comment">/* 选中的是访问过的a元素 */</span><br>       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>           <span class="hljs-attribute">color</span>:black;<br>       &#125;<br>       <span class="hljs-comment">/* 选中的是鼠标悬停状态的a元素 */</span><br>       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>           <span class="hljs-attribute">color</span>: blue;<br>       &#125;<br>       <span class="hljs-comment">/* 选中的是激活状态的a元素 */</span><br>       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>           <span class="hljs-attribute">color</span>: blueviolet;<br>       &#125;<br></code></pre></td></tr></table></figure><blockquote><p>hover和active是通用，link和visited是a标签特有的</p></blockquote><ul><li><p>结构伪类</p><p><code>:nth-last-child(n)</code>所有兄弟元素中的倒数第n个</p><p><code>:nth-last-of-type(n)</code>所有同类型兄弟元素中的倒数第n个</p><p><code>:only-child</code>选中没有兄弟的元素(独生子女)</p><p><code>:only-of-type</code>选中没有同类型兄弟的元素</p><p><code>:root</code>根元素</p><p><code>:empty</code>元素为空元素</p><blockquote><p>选中的是div的第一个儿子元素p</p><p>div&gt;p:first-child{}&#x2F;div&gt;p:last-child{}</p></blockquote><blockquote><p>选中的是 div 的后代p,且p的父级是谁无所谓，但p必须是其父代的第一个儿子</p><p>div p:first-child{}</p></blockquote><blockquote><p>选中的是div的第n个儿子p元素(第n个是按照所有兄弟计算的)</p><p>div&gt;p:nth-child(n){}</p><p>tips:关于n值：-n+3表示选中前三个</p><p>div&gt;p:nth-last-child(n){}倒数第n个</p></blockquote><blockquote><p>选中的是div的第n个儿子p元素(第n个是按照同类型(在这里也就是按p)兄弟计算的)</p><p>div&gt;p:first-of-type{}&#x2F;div&gt;p:last-of-type{}</p><p>div&gt;p:nth-of-type(n){}</p><p>div&gt;p:nth-last-of-type(n){}</p></blockquote><blockquote><p>span:only-child{}选中的是没有兄弟的span</p><p>span:only-of-type{}选中的是没有同类型兄弟的span</p></blockquote><blockquote><p>：root {</p><p>background-color:red;</p><p>}  选中整个html进行相当于html{}</p></blockquote><blockquote><p>选中的是没有内容的div</p><p>div:empty {</p><p>​width:100px;</p><p>​height:100px;</p><p>}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>否定伪类</p></li></ul><p><code>:not(选择器)</code>排除满足括号中条件的元素</p><ul><li>UI伪类</li></ul><p><code>input:checked &#123;&#125;</code>选中的是勾选的复选框</p><p><code>input:disabled &#123;&#125;</code>选中的是被禁用的</p><p><code>input:enabled &#123;&#125;</code>选中的是可用的input元素</p><ul><li>目标伪类</li></ul><p><code>:target</code>选中锚点所指向的元素</p><ul><li>语言伪类</li></ul><p><code>:lang=() &#123;&#125;</code></p><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><blockquote><p>伪元素是元素中的一些特殊位置</p></blockquote><p><code>::first-letter&#123;&#125;</code>选中的是元素中的第一个字母</p><p><code>::first-line&#123;&#125;</code>选中元素中的第一行文字</p><p><code>::selection&#123;&#125;</code>选中的是元素中被鼠标选择的文字</p><p><code>input::placeholder&#123;&#125;选中的是input输入框的中的提示文字</code></p><p><code>::before&#123;&#125;</code>在元素最开始的位置创建一个子元素(必须用<code>content</code>属性指定内容)</p><p><code>::after&#123;&#125;</code>在元素最后的位置创建一个子元素(必须用<code>content</code>属性指定内容)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::before</span>&#123;<br><span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;￥&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>W1</title>
    <link href="/2024/07/16/W1/"/>
    <url>/2024/07/16/W1/</url>
    
    <content type="html"><![CDATA[<h1 id="第一周（7-7-7-14）"><a href="#第一周（7-7-7-14）" class="headerlink" title="第一周（7.7~7.14）"></a>第一周（7.7~7.14）</h1><ul><li>学习markdown基本用法</li><li>安装vscode配置leetcode插件</li><li>html学习</li></ul><hr><span id="more"></span><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><blockquote><p>标准格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>&#x2F;正斜杠一般是路径  \反斜杠是字符</p><p>ctrl+&#x2F; 注释  &lt;! - -     - - &gt;</p><p>shift alt a 多行注释</p><p>ctrl+z 注销</p><p>ctrl+x删除光标所在的一行</p><p>ctrl +回车 实现换行</p><p>shift alt+⬆&#x2F;⬇复制</p><p>window徽标键+v 剪贴板历史记录</p><hr><h3 id="特殊规则"><a href="#特殊规则" class="headerlink" title="特殊规则"></a>特殊规则</h3><ul><li>块级元素中能写行内元素和块级元素</li><li>行内元素中能写行内元素但不能写块级元素</li><li>h1-h6不能互相嵌套 p标签中不能写块元素</li></ul><hr><h3 id="相对路径绝对路径"><a href="#相对路径绝对路径" class="headerlink" title="相对路径绝对路径"></a>相对路径绝对路径</h3><p>.&#x2F;当前位置</p><p>&#x2F;下一级</p><p>..&#x2F;上一级</p><h3 id="常见图片格式"><a href="#常见图片格式" class="headerlink" title="常见图片格式"></a>常见图片格式</h3><p>jpg格式 有损压缩格式</p><ul><li><p>tips:</p><p>支持颜色丰富，占用空间较小，<strong>不支持透明背景</strong>，不支持动态图</p><p>使用场景：对图片细节没有极高要求的场景</p></li></ul><p>png格式 无损压缩格式，能够更高质量的保存图片</p><ul><li><p>tips:</p><p>支持颜色丰富，占用空间略大，<strong>支持透明背景</strong>，不支持动态图</p><p>使用场景：让图片有透明背景更高质量呈现图片</p></li></ul><p>bmp格式 不进行压缩</p><ul><li><p>tips:</p><p>支持颜色丰富，占用空间极大</p></li></ul><p>gif格式</p><ul><li><p>tips：</p><p>仅支持256种颜色，色彩呈现不完整</p><p>支持简单透明背景，支持动态图</p></li></ul><hr><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接&lt;a&gt;"></a>超链接<code>&lt;a&gt;</code></h3><p>具有 href属性的a标签是超链接，具有name属性的a标签是锚点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 什么都可以放在a标签里面，但不能嵌套a标签 可以是文字也可以是图片，点击他们就跳转到相应链接去 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.bilibili.com/video/BV1p84y1P7Z5/?p=30&amp;spm_id_from=pageDriver&amp;vd_source=f3804be30ae733550cae8999342bca87&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-comment">&lt;!-- 浏览器打开触发下载 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://wxxxxx&quot;</span> <span class="hljs-attr">download</span>&gt;</span>下载到<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 设置锚点 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;被跳转对象&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;atm&quot;</span>&gt;</span>设置锚点的第二种方法<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 超链接 --&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#被跳转对象&quot;</span>&gt;</span>跳转到锚点<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#atm&quot;</span>&gt;</span>跳转到第二种方法的锚点<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>整体的介绍结束<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>刷新页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(666);&quot;</span>&gt;</span>点我弹窗<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:10010&quot;</span>&gt;</span>电话联系<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:2430999@qq.com&quot;</span>&gt;</span>邮件联系<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sms:10086&quot;</span>&gt;</span>短信联系<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格&lt;table&gt;"></a>表格<code>&lt;table&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--行--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--单元格--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100&quot;</span><span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">thead</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;25&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--top middle bottom--&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>性别<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>民族<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;50&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-comment">&lt;!--tabledata--&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>汉族<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>18<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>汉族<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王老五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>汉族<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;25&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>共三人<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表单"><a href="#表单" class="headerlink" title="表单&lt;form&gt;"></a>表单<code>&lt;form&gt;</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>单选框 input type&#x3D;”radio”</p><p>复选框input type&#x3D;”checkbox”</p><blockquote><p>单选框和复选框一定要写value</p></blockquote><p>文本域<code>&lt;textarea&gt;</code></p><p>下拉框<code>&lt;select&gt;</code> <code>&lt;option&gt;</code></p><p><code>&lt;label&gt;</code>标签可与表单控件相关联，关联之后点击文字，与之对应的表单控件就会获取焦点</p><table><thead><tr><th>标签名</th><th>标签语义</th><th>常用属性</th></tr></thead><tbody><tr><td><code>form</code></td><td>表单</td><td><code>action</code>属性：表单要提交的地址<br /><code>target</code>属性：跳转的新地址的打开方式；<code>_self</code> <code>blank</code><br /><code>method</code>属性：请求方式，<code>get</code> <code>post</code></td></tr><tr><td><code>input</code></td><td>多种形式的表单控件</td><td><code>type</code>属性：指定表单控件的类型；<code>text</code> <code>password</code> <code>radio</code> <code>checkbox</code> <code>hidden</code> <code>submit</code> <code>reset</code> <code>bottom</code> <br /><code>name</code>属性：指定数据名称<br /><code>value</code>属性：<br />             对于输入框：指定默认输入的值<br />             对于单选和复选框：实际提交的数据<br />              对于按钮：显示按钮文字<br /></td></tr><tr><td><code>textarea</code></td><td>文本域</td><td></td></tr><tr><td><code>select</code></td><td>下拉框</td><td></td></tr><tr><td><code>option</code></td><td>下拉框的选项</td><td></td></tr><tr><td>&#96;&#96;</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h3><blockquote><p><code>iframe</code>在网页中嵌入其他文件<br><code>name</code>框架名字，可与<code>target</code>属性配合</p><p>实际应用：在网页中嵌入广告，与超链接或表单的<code>target</code>配合显示不同的内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 利用iframe嵌入一个普通网页 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;550&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 与超链接的target配合使用 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.bilibili.com/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>点我看B站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- 与表单的target配合使用 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;https://so.toutiao.com/search&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keyword&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;200&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br> <br></code></pre></td></tr></table></figure><h3 id="html字符实体"><a href="#html字符实体" class="headerlink" title="html字符实体"></a>html字符实体</h3><p><code>&amp;nbsp;</code>  空格</p><p>&lt; <code>&amp;lt; </code>  &gt;<code>&amp;gt;</code></p><blockquote><p>less than    greater than</p></blockquote><p>&amp;<code>&amp;amp;</code></p><p>￥<code>&amp;yen;</code>  </p><p>©<code>&amp;copy;</code>版权所有</p><p>×<code>&amp;times;</code></p><p>÷<code>&amp;divide;</code></p><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>给标签指定唯一标识，注意<code>id</code>是不能重复的。<br />作用：让<code>label</code>标签与表单控件相关联；也可与css js配合使用</td></tr><tr><td>class</td><td>给标签指定类名，随后通过CSS就可以给标签设置样式</td></tr><tr><td>style</td><td>给标签设置css样式</td></tr><tr><td>dir</td><td>内容的方向 <code>ltr</code> <code>rtl</code></td></tr><tr><td>title</td><td>给标签设置一个文字提醒，一般超链接和图片用的比较多</td></tr><tr><td>lang</td><td>给标签指定语言</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/15/hello-world/"/>
    <url>/2024/07/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
